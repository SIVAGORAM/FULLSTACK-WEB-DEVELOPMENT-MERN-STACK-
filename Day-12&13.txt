âœ… HTML, CSS & Bootstrap
ðŸ”¹ HTML (HyperText Markup Language)
Defines structure of web pages using elements like:

<div>, <h1> to <h6>, <p>, <img>, <a>, <form>, <table>, etc.

Attributes: id, class, href, src, alt, style, name, etc.

Semantic Tags: <article>, <section>, <nav>, <header>, <footer>

ðŸ”¹ CSS (Cascading Style Sheets)
Used for styling HTML content

Syntax: selector { property: value; }

Types:

Inline CSS

Internal CSS (<style>)

External CSS (<link rel="stylesheet">)

Box Model: margin, border, padding, content

Responsive Design: Media queries (@media)

Flexbox & Grid for layout

ðŸ”¹ Bootstrap
A CSS framework for responsive design

Uses pre-defined classes for layout (.container, .row, .col-md-6)

Components: Buttons, Modals, Navbar, Carousel, etc.

Utilities: spacing, text, shadows, etc.

âœ… JavaScript â€“ Core to Advanced
ðŸ”¹ Data Types
Primitive: Number, String, Boolean, Null, Undefined, Symbol, BigInt

Non-Primitive: Object, Array, Function

ðŸ”¹ Variable Declarations
var: Function-scoped, hoisted

let: Block-scoped, not hoisted

const: Block-scoped, constant reference (not immutable)

ðŸ”¹ Scope
Global Scope: Available everywhere

Function Scope: Variables declared inside a function

Block Scope: With let and const in { }

ðŸ”¹ Hoisting
JavaScript lifts declarations (not initializations) to the top

var is hoisted with undefined

let and const are hoisted but stay in Temporal Dead Zone (TDZ)

ðŸ”¹ Memory Phases
Memory Creation Phase: Variables/functions stored in memory

Execution Phase: Code runs line by line, values assigned

ðŸ”¹ Functions
Define reusable logic

function greet(name) {
  return "Hello, " + name;
}
Parameters vs Arguments

Return statements

Real-World Use: Event handling, calculations, data processing

âœ… Arrays, Objects & Array of Objects
ðŸ”¹ Arrays

let arr = [1, 2, 3];
Indexed collections of items

Methods: push(), pop(), slice(), splice(), map(), filter()

ðŸ”¹ Objects

let user = { name: "Alex", age: 25 };
Key-value pairs

Access: user.name or user["age"]

ðŸ”¹ Array of Objects

let students = [{name:"A"}, {name:"B"}];
Useful for structured data

Often used with map(), filter(), find()

âœ… Loops
for: Standard loop

for (let i = 0; i < 5; i++) console.log(i);
forEach: Array method, doesn't return anything

map: Returns a new array

Use map when transforming data, for for custom logic, and forEach for side effects

âœ… Error Types
ReferenceError: Accessing an undefined variable

TypeError: Incorrect operation on a data type

SyntaxError: Invalid code structure

âœ… Array Methods

ðŸ”¹ find()
Returns the first element that matches a condition

arr.find(x => x > 5);

ðŸ”¹ filter()
Returns all elements matching the condition

arr.filter(x => x > 5);

ðŸ”¹ reduce()
Accumulates a value by applying a function

arr.reduce((acc, val) => acc + val, 0);
ðŸ”¹ slice(start, end)
Returns shallow copy of array

arr.slice(1, 3);

ðŸ”¹ splice(start, deleteCount, item1, item2)
Modifies array in-place

arr.splice(2, 0, "inserted");

ðŸ”¹ push() and pop()

push(): Add to end

pop(): Remove from end

âœ… Callback Functions & Chaining
ðŸ”¹ Callback Function

A function passed as an argument to another function

function greet(callback) {
  callback("World");
}

ðŸ”¹ Chaining
Calling methods one after the other

arr.filter(x => x > 2).map(x => x * 2).reduce((a, b) => a + b);

âœ… DOM Manipulation
DOM: Document Object Model â€“ tree structure of HTML elements

Select Elements:

getElementById, querySelector, getElementsByClassName

Modify:

element.innerText, element.innerHTML, element.style, element.classList

Events:

element.addEventListener("click", function() {...});

âœ… Virtual DOM vs JS DOM:-
  
  | Feature          | JavaScript DOM | Virtual DOM              |
| ---------------- | -------------- | ------------------------ |
| Type             | Real DOM       | In-memory representation |
| Speed            | Slower updates | Faster updates           |
| Change Detection | Manual         | Uses diffing algorithm   |
| Used in          | Vanilla JS     | React, Vue, etc.         |
