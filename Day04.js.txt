✅ What are Data Types in JavaScript?
In JavaScript, data types represent the kinds of values that can be stored and manipulated in a program. They are categorized into two types:

🟢 1. Primitive Data Types (immutable):

1.1 String – Sequence of characters
    let name = "Siva";
 
1.2 Number – Integer or floating point
    let age = 25;

1.3 Boolean – true or false
let isOnline = true;


1.4 Undefined – A variable that is declared but not assigned
let x;

1.5 Null – Intentionally empty or "nothing"
let y = null;

1.6 Symbol – Unique and immutable value (used as object keys)

1.7 BigInt – Large integers beyond 2^53 - 1
let big = 1234567890123456789012345678901234567890n;

🔵 2. Non-Primitive (Reference) Data Types:

2.1. Object – Collection of key-value pairs
let person = { name: "Siva", age: 25 };

2.2. Array – Ordered list of values
let colors = ["red", "green", "blue"];


2.3. Function – A block of code
function greet() {
  return "Hello!";
}


🔄 Difference between var, let, and const in JavaScript

| Feature            | `var`                                | `let`                         | `const`                          |
| ------------------ | ------------------------------------ | ----------------------------- | -------------------------------- |
| **Scope**          | Function-scoped                      | Block-scoped                  | Block-scoped                     |
| **Hoisting**       | Hoisted (initialized as `undefined`) | Hoisted (but not initialized) | Hoisted (but not initialized)    |
| **Re-declaration** | Allowed                              | ❌ Not allowed in same scope   | ❌ Not allowed in same scope      |
| **Re-assignment**  | ✅ Allowed                            | ✅ Allowed                     | ❌ Not allowed                    |
| **Use case**       | Legacy code (avoid now)              | Use when value changes        | Use when value should not change |


✅ Example:

var x = 10;
let y = 20;
const z = 30;

x = 100;  // Allowed
y = 200;  // Allowed
z = 300;  // ❌ Error: Assignment to constant variable


1: var is Function/Global Scoped

var name = "Siva";

{
  console.log("Before:", name); // 👉 Output: "Before: Siva"
  var name = "Ram";
  console.log("After:", name);  // 👉 Output: "After: Ram"
}

console.log("Outside:", name);  // 👉 Output: "Outside: Ram"


2: let is Block Scoped

let name = "Siva";

{
  console.log("Before:", name); // 👉 Output: "Before: Siva"
  let name = "Ram";
  console.log("After:", name);  // 👉 Output: "After: Ram"
}

console.log("Outside:", name);  // 👉 Output: "Outside: Siva"


3: const is Block Scoped and Not Re-assignable

const name = "Siva";

{
  const name = "Ram";
  console.log("Inside Block:", name); // 👉 Output: "Inside Block: Ram"
}

console.log("Outside Block:", name);  // 👉 Output: "Outside Block: Siva"


4: let Cannot Be Re-declared in Same Scope

let city = "Kurnool";
// let city = "Hyd"; // ❌ Error: Identifier 'city' has already been declared

✅ You can use it in a new block though:

let city = "Kurnool";
{
  let city = "Hyd";
  console.log("Block city:", city); // 👉 "Hyd"
}
console.log("Outer city:", city);   // 👉 "Kurnool"


5: Hoisting Difference Between var and let/const

console.log(a); // 👉 undefined (because `var` is hoisted)
var a = 5;

console.log(b); // ❌ ReferenceError (temporal dead zone)
let b = 10;

6.

var name = "siva";

{
  console.log("Before", name);  // ❌ Error here
  let name = "Ram";
  console.log("After", name);
}

console.log(name);

Output:-
ReferenceError: Cannot access 'name' before initialization


7. Rename block variable:-

var name = "siva";

{
  console.log("Before", name);  // ✅ "Before siva"
  let newName = "Ram";
  console.log("After", newName); // ✅ "After Ram"
}

console.log(name);  // ✅ "siva"


8. 

var name = "siva";
{
  let name = "Ram";
  console.log("After", name);
  name = Ravi;
}
console.log(name);

Output:-
ReferenceError: Ravi is not defined


9. 

var name = "siva";
{
  let name = "Ram";
  console.log("After", name); // ✅ Output: "After Ram"
  name = "Ravi";
  console.log("Updated name:", name); // ✅ Output: "Updated name: Ravi"
}
console.log(name); // ✅ Output: "siva"

